What Are Claases And Objects In Python?
Object is simply a collection of data (variables) and methods (functions) that act on those data. And, class is a blueprint for the object.

Defining A Class In Python:-
Like function definitions begin with the keyword def, in Python, we define a class using the keyword class.A class creates a new local
namespace where all its attributes are defined. Attributes may be data or functions.
                 There are also special attributes in it that begins with double underscores (__). For example, __doc__ gives us the docstring
of that class.
                 As soon as we define a class, a new class object is created with the same name. This class object allows us to access the 
different attributes as well as to instantiate new objects of that class.

class MyClass:
	"This is my second class"
	a = 10
	def func(self):
		print('Hello')

# Output: 10
print(MyClass.a)

# Output: <function MyClass.func at 0x0000000003079BF8>
print(MyClass.func)

# Output: 'This is my second class'
print(MyClass.__doc__)

Creating An Object In Python:-
This will create a new instance object named ob. We can access attributes of objects using the object name prefix.Attributes may be data or 
method. Method of an object are corresponding functions of that class. Any function object that is a class attribute defines a method for
objects of that class.
This means to say, since MyClass.func is a function object (attribute of class), ob.func will be a method object.

class MyClass:
	"This is my second class"
	a = 10
	def func(self):
		print('Hello')

# create a new MyClass
ob = MyClass()

# Output: <function MyClass.func at 0x000000000335B0D0>
print(MyClass.func)

# Output: <bound method MyClass.func of <__main__.MyClass object at 0x000000000332DEF0>>
print(ob.func)

# Calling function func()
# Output: Hello
ob.func()


You may have noticed the self parameter in function definition inside the class but, we called the method simply as ob.func() without any arguments.
It still worked.

This is because, whenever an object calls its method, the object itself is passed as the first argument. So, ob.func() translates into 
MyClass.func(ob).
